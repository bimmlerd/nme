Title         : Numerik Exercise Sessions
Heading Base  : 2
Heading depth : 4
Logo          : false
Package       : mathtools

[TITLE]

~ MathDefs
\newcommand{\M}[1]{\mathbf{#1}}
\newcommand{\A}{\M{A}}
\newcommand{\I}{\M{I}}
\newcommand{\x}{\M{x}}
\newcommand{\Ax}{\A\x}
\newcommand{\norm}[1]{\left\lVert#1\right\rVert}
~

# Session

## Organisation

abohn@student.ethz.ch

## Much Blah about Householder reflections (see also email)

# Session

## Organisation

Midterm information -> Hiptmair, G Alberti or F Leonardi

## Assignment 1 Post

### Arten von Fehlern

- __Näherungsfehler__: Vereinfachte Annahmen $\to$ simplere/schnellere Berechnung
- __Diskretisierungsfehler__: Iterative Verfahren $\to$ endliche Anzahl Schritte im Computer (unendlich wäre exakte Lösung), deshalb Näherung $\neq$ exakter Wert. Beispiel: Newton-Verfahren
- __Rundungsfehler__: Korrekte Zahl wird auf nächste Computerzahl auf- oder abgerundet. Fehler $\to$ Numerische Instabilität $\to$ falsches Ergebnis

### Tipps für Cancellation Aufgaben

- Nie zwei fast gleich grosse Werte subtrahieren
- Nie einen sehr grossen mit/von einem sehr kleinen Wert addieren/subtrahieren $\to$ versuchen in Multiplikation umzuwandeln

## Assignment 2 Pre

### Lyapunov Equation

Normales LGS: $\A x = b$

Lyapunov-Gleichung: $\M{AX}+\M{XA}^T = \I$

#### f) Upper bound for `nnz(C)`

`nnz(`$\M{X}$`)` $\approx O(n) \to \M{X}$ ist sparse

Finde: nnz(C) <= * $\cdot$ nnz(A)

Tipps: Betrachte Blöcke von C (a11 * B etc)
Fallunterscheidung i != j, i = j $\to$ Lösung

Ist C immer eine Sparse Matrix? Nein. Bedingung nnz(C) $\approx$ O(n)

#### g) Eigen implementation

- Sparse -> Triplets
- unsupported library path to include -> Kroenecker Product

``` cpp
#include <Eigen/Dense>
#include <Eigen/Sparse>
#include <iostream>
#include <vector>

using namespace Eigen;

SparseMatrix<double> buildC(const MatrixXd &A) {
  int n = A.rows();
  SparseMatrix<double> C(n*n, n*n);
  
  vector<Triplet<double>> triplets;
  MatrixXd I = MatrixXd::Identity(n,n);
  
  // nested for loop through blocks of kronecker product
    // Besetze Triplet (filter out 0s, no need to save those in sparse)
    Triplet<double> triplet = Triplet(row, column, value); // row col from loops, val from kron prod
    triplets.push_back(triplet);
  
  C.setFromTriplets(triplets.begin, triplets.end);
  C.makeCompressed();
  return C
}
```

#### i) solveLyapunov

``` cpp
  int n = A.rows();
  SparseMatrix<double> C;
  
  C = buildC(A);
  b = // Eigen::Map<MatrixXd> from Identity
  // Löse Cx = b (x als Vektor)
  VectorXd vecX(n*n);
  SparseLU<SparseMatrix<double>> solver;
  solver.compute(C);
  vecX = solver.solve(b);
  // Map vecX zu X
```

### Partioned Matrix

$\A = \begin{bmatrix}
\M{R} & v \\
u^T & 0
\end{bmatrix}$

#### a) Wann ist R invertierbar?
$\det(\M{R}) \neq 0$

#### b)
$\begin{bmatrix}
\M{R} & v \\
u^T & 0
\end{bmatrix}
\begin{bmatrix}
z\\
\chi
\end{bmatrix} = 
\begin{bmatrix}
b \\
\beta
\end{bmatrix}$

$\begin{bmatrix}
\I & 0 \\
0 & 1
\end{bmatrix}$

# Session

## Pre

### Rank one perturbation

_Theorem_ (3.1.6.103)

_LGS_ $\Ax = \M{b}$ $\A \in \mathbb{M}^{n\times n}$ regulär

_Störung_ $A$ mit Tilde drüber: veränderung von $\A$ in einem einzelnen Eintrag/ einer einzelnen Zeile von A heissen Rang-1-Modifikationen

_Konstruktion_

$\tilde{A} := A + u*v^H$ ($u*v^H$ Matrix von Rang 1)

_Idee_

$\tilde{A}\tilde{x} = b$

Schreib als

~ Equation
\begin{bmatrix}
\A & u \\
v^H & -1
\end{bmatrix}
\cdot
\begin{bmatrix}
\tilde{x} \\
\tilde{\xi}
\end{bmatrix}
=
\begin{bmatrix}
b \\
0
\end{bmatrix}
~

~ Math
\begin{bmatrix}
\A \tilde{x} + u \tilde{\xi} \\
v^H \tilde{x} - \tilde{\xi}
\end{bmatrix}
=
\begin{bmatrix}
b \\
0
\end{bmatrix}
~

~ Math
\tilde{\xi} = v^{H}\tilde{x}
~


~ Math
\tilde{A}\tilde{\xi} + u \times \tilde{\xi} = A\tilde{x} + uv^H\tilde{x} = (A + uv^{H}) \tilde{x} = b
~

------

Was macht Code?

d -> Vektor, tol -> Toleranz

a) übersetzen

```
Matlab: lnew = min(abs(d))
```
```cpp
C++: double lnew = d.cwiseAbs().minCoeff()
```

c) Ziel: optimale Komplexität

Benutze SMW-Formel um modifiziertes LGS zu lösen ~1.6.113 im Skript

### not a core problem

### 3. C++ Kentnisse verbessern

Unterpunkte _müssen_ nicht beachtet werden

Aufgabe: Umwandlung von Triples (COO format) zu CRS (compact row storage)

_Theorie_ Triplet List format Skript 1.7.6
Triplets (row, col, value) siehe Serie 2

_Eigenschaften_

- Indizes können doppelt vorkommen -> Eintrag in Matrix ist Summe der einzelnen Values mit selben indizes
- reihenfolge im vector egal
- insgesamt gleiche anzahl werte von row, col, val

_CRS Compact Row Storage_

Es git 3 arrays:

- val = Array mit allen werten ungleich 0
- col_ind = zu jedem element aus val index der spalte 
- row_ptr = welche werte von val zu welcher zeile (rowptr[n+1] = nnz(A)+1)


#  Session

## Post Serie 3

### Aufgabe 1

lnew/lmin keine Bedeutung
Wichtig: body der schleife

M = diag(d) + ev*ev' entspricht Ã

A: diagonal matrix

Ausgang:
M * x = ev

x = M \\ ev

ev = x

lnew = ev' * M * ev

Besser:

Benutzer SMW-Formel

A entspricht diag(d), u = v = b = ev
Benutze Form von A
-> Vektor multiplikation

Implementation
Inverse von 'diag(d)': VectorXd dinv = (1/d.array()).matrix()

```
while() {
  lmin = lnew
  VectorXd ev0 = ev
  VectorXd Aib = dinv.cwiseProduct(ev); entspricht A^-1b = A^-1u
  double temp = ev.transpose() * Aib; entspricht v^HA^-1b = v^HA^-1u
  ev = Aib - temp / (1 + temp) * ev; entspricht x = A^-1b - \frac{(v^HA^-1b)}{1 + v^H A^-1u}u
  ev.normalize();
  lnew = ev.transpose() * d.cwiseProduct(ev) + pow(ev.transpose() * ev0, 2);
}
Herleitung
  lnew = ev'Mev = ev^(diag(d) + ev0 *ev0)^) * ev
  lnew = ev^diaf(d) * ev + ev^(ev0 * ev^')ev
  
  ev^(ev0 * ev^')ev = (ev'ev0)^2

```

### Sinh-Approx

blah

## Pre 4

### Thema: Iterative Lösungsmethoden nicht lin GS

Problemstellung: $F \subset R^n \to R^n$
gesucht: $x^* \in R^n$ mit $F(x^*)=0$

Vorgehen:

- Startwert(e): $x^0$
- Iterationsschritte $x^1, x^2, ..., x^{n-1}$
- Abbruchkriterium $x^n \approx x^*$   

Def: Konvergenzrate/-ordnung

Eine Folge $x^k$ konvergiert mit Ordnung $p$ gegen $x^*$, wenn $\exists L \in R_{>0} || x^{k+1}- x^k|| \leq L|| x^{k+1}- x^k||^p$

$L$: Konvergenzrate

Bem:

1. $L \in ]0,1[, p = 1$ -> lineare Konvergenz
2. $L \in R_{>0}, p = 2$ -> quadratische Konvergenz

#### Konvergenzrate numerisch bestimmen:

- absoluten Fehler: $e^k = ||x^k - x^*||$

$x^*$ ist im Allgemeinen nicht bekannt, also Code einmal laufen lassen -> $x^* = x^n$

- Berechnen $p$: $p\approx \frac{\log{\epsilon^{k+1}} - \log{\epsilon^{k}}}{\log{\epsilon^{k}} - \log{\epsilon^{k-1}}}$

##### Bsp

Code liefert: $x^0, x^1, x^2, ..., x^n$
Bestimme $\epsilon^{0}, \epsilon^{1}, \epsilon^{2},...,  \epsilon^{n-1}$

Berechne: $\frac{\log{\epsilon^{4}} - \log{\epsilon^{3}}}{\log{\epsilon^{3}} - \log{\epsilon^{2}}}$ ... $\frac{\log{\epsilon^{n-1}} - \log{\epsilon^{n-2}}}{\log{\epsilon^{n-2}} - \log{\epsilon^{n-3}}}$

-> mittelwert

##### Bsp für it. Methoden

1) Bisektionsverfahren

  $x \cdot e^x - 1$
  
  1. Intervall $[a,b] mit \exists$ Nullstelle
  2. Bestimme Mittelpunkt des Intervalls ($m = \frac{a+b}{2}$)
  3. Prüfe
  ```
  if f(a) * f(m) < 0:
    b = m;
  else:
    a = m;
  ``` 
  4. Abbruchkriterium:
  
    - $||x^k-x^{k-1}|| < tol$ (absoluter Fehler)
    - $||x^k - x^{k-1}|| < tol \cdot ||x^{k-1}||$ (relativer Fehler)
    
  *Eigenschaften*
  - 2 startwerte uaf NST
  - konvergiert langsam, aber garantiert falls SW richtig gewählt 

2) **Fixpunktiteration**

  Def: $\phi$ ist eine *Kontraktion* auf $D \subset R^{n}$, falls $\exists L \in ]0,1[ ||\phi(x)-\phi(y)|| < L ||x-y||$ $\forall x,y \in D$
  
  1D: $D = [a,b]$ ud $\phi$ hat auf [a,b] Steigung, deren Betrag $<1$ ist.
  
  *Banachscher Fixpunksatz:*
  Sei $\phi : D\subset R^n \to R^n$ eine Abbildung mit Bedingungen:
  
  1) $\phi$ bildet abgeschlossene Teilmenge $M \subset D$ auf sich selbst ab: $\phi(M) \subset M$
  2) Auf $M$ ist $\phi$ eine Kontraktion
  
  Dann gilt:
  
  1) $\phi$ besitzt in $M$ *genau einen Fixpunkt*: $F(x^*) = x^*$
  2) Für jeden Startwert $x^0 \in M$ konvergiert die Folge : $x^k = \phi(x^{k-1})$ gegen den Fixpunkt $x^*$
  
  
  *Idee*: Mache Nullstellen-Problem zu Fixpunkt-Problem
  
  *Beispiel*:
  $F(x) = xe^x - 1 = 0$
  
  gesucht ist jetz $\phi$ mit $\phi(x^*) = x^*$
  
  zB
  
  - $\phi_1(x) = xe^x -1 + x$ (addiere $x$)
  - $\phi_2(x) = e^{-x}$ (denk dir $\overset{!}{=} x$)
  - $\phi_3(x) = \frac{1 + x}{1 + e^x}$
  
  *Vorgehen*
  
  1. Startwert $x^0$
  2. Iterationsschritt: $x^{k+1} = \phi(x^k)$
  2. Abbruch
  
  *Eigenschaften* konvergiert unterschiedlich bzw gar nicht für verschiedene $\phi$.
  
3) **Newton-Verfahren**

  Tangente bestimmen, Schnittpunkt mit Nullstelle bestimmen -> Tangente an Schnittpunkt besitmmen etc
  
  Benötigt:
  - Funktion muss 2 mal differenzierbar sein: $f\in C^2(R)$
  - $f'$ mit $f'(x^*) \neq 0$
  
  Vorgehen
  - SW $x^0$
  - Iteration: $x^{k+1} = x^{k} - \frac{f(x^k)}{f'(x^k)}$
  - Abbruch
  
  Eigenschaften:
  - schnelle Konvergenz (in der Regel quadratisch)
  - kann divergieren (zb arctan ausser in kleinem bereich um $(0,0)$)
  - $f'$ wird benötigt
  
4) **Sekantenverfahren**

  Idee: Statt Ableitung Sekante berechnen
  
  Vorgehen:
  
  - Zwei Startwerte $x^0, x^1$ (NST muss nicht drin liegen)
  - Iteration: $x^{k+1} = x^k - f(x^k) \cdot \frac{x^k - x^{k-1}}{f(x^k) - f(x^{k-1})}$
  - Abbruch
  
5) **Inverse Interpolation**

  Geg: $F : I\subset R \to R$  monoton mit $F(x^*) = 0 \leftrightarrow x^* = F^1(0)$
  
  Idee: Interpolation von $F^1$ als Polynom $p(a)$ von Grad $m-1$ NST von $F$ geg durch $p(0)$
  
  Bsp: $m = 3 \implies $ Parabel
  
  3 Startwerte $x^1, x^2, x^3$
  
  Interpoliert Polynom durch $(F(x^0),x^0), (F(x^1),x^1), (F(x^2),x^2)$ benutze `polyfit`
  
  Iteration: $x^3 = p(0)$ $\to$ drei neue Werte $x^0, x^1, x^2$ usw

# Session

## Midterm Infos { @h1-h2 = 0}

Alles einschliesslich Kapitel, ohne Serie 5.

Modus: Multiple Choice

Code: nur lesen/verstehen, nicht schreiben

probably mostly Verständnisfragen

## Post 4

### Order of Convergence from Error recursion

#### Maximal Order of Convergence { @h1-h2-h3-h4 = "a"}

hat gestimmt

`diff` would've been useful: `diff(le(2:end)) / diff(le(1:end-1))` for `le = log(e)`

#### Analytical Considerations

*Def*: $\norm{e^{n}} \leq C \cdot \norm{e^{n-1}}^p$

*Annahme* worst case: "="

=>
~Math
\begin{aligned}
\norm{e^{n-1}} &= C \cdot \norm{e^{n}}^p = C \cdot \norm{C \cdot \norm{e^{n-1}}^p}^p \\
&= C^{p+1} \cdot \norm{e^{n-1}}^{p^2}
\end{aligned}
~

-----
Siehe handwritten notes

-----

Newton Verfahren Implementationsdemo, siehe Mail

# Session

## Post 5

### Modifiziertes Newton Verfahren

#### Zeige Konsistenz

hat gestimmt

### Julia Menge {@h1-h2-h3="4"}

In $\mathbb{C}$: $z^n = 1$ $\to$ $n$ Lösungen

