Title         : Problem Sheet 1
Subtitle      : Numerical Methods for CSE
Heading Base  : 2
Author        : David Bimmler
Package       : mathtools
Logo          : false

[TITLE]

# Arrow matrix-vector multiplication 
## Matrix A { @h1-h2="a" } 

~ Math
A = 
\begin{bmatrix}
    d_{1}  & 0      & 0      & \dots  & a_{1}  \\
    0      & d_{2}  & 0      & \dots  & a_{2}  \\
    0      & 0      & d_{3}  & \dots  & a_{3}  \\
    \vdots & \vdots & \vdots & \ddots & \vdots \\
    a_{1}  & a_{2}  & a_{3}  & \dots  & d_{n}
\end{bmatrix}
~

## ``tic-toc`` Results

We can clearly see that the asymptotic complexity of the function ``arrowmatvec`` lies in $O(n^3)$. In the first few measurements, the actual multiplication is being dominated by other factors, such as the calls to length and the creation of the matrix A. With increasing input size $n$, though, these factors become have a lesser impact, and most of the time is spend calculating the product, which is why the runtime approaches the graphed line.

From the code we can see why $O(n^3)$ is the expected asymptotic complexity: the matrix $A$ gets multiplied with itself, which is an operation in $O(n^3)$ as the matrices are all square and of size $n$.

## Efficient Reimplementation

We can avoid creating the matrix A entirely. Furthermore, we first simulate the multiplication of A with x and then simulate the second multiplication of A with the result. The multiplication with A is simulated by exploiting the arrow structure.
```
[INCLUDE=code/arrowmatvec2.m]
```
## Complexity of Reimplementation

The more efficient version runs in $O(n)$.

## Runtime Comparison

![nme1p1e_plot]

The above plot was generated using the following code:

```
[INCLUDE=code/nme1p1e.m]
```

[nme1p1e_plot]: images/nme1p1e_plot.png "nme1p1e_plot" { width=auto max-width=90% }

## [Eigen]{font-variant=small-caps} implementations

### ``arrowmatvec``

``` cpp
[INCLUDE=code/arrowmatvec.cpp:1-20]
```

### ``arrowmatvec2``

``` cpp
[INCLUDE=code/arrowmatvec2.cpp:1-21]
```

# Avoiding Cancellation

## Behaviour of the Error

### Derivation of $f_2$

~ Equation
f_1(x_0,h) \coloneqq \sin(x_0 + h) - \sin(x_0)
~

~ Equation
\sin(x_0 + h) - \sin(x_0) = 2\cos(x_0 + \frac{h}{2})\sin(\frac{h}{2})\eqqcolon f_2(x_0,h)
~

### Approximation for $f'(x)$

~ Equation
f'(x) \approx \frac{f(x_0 + h) - f(x_0)}{h} = \frac{f_2(x_0,h)}{h}
~

The following code implements this formula:
```
function res = nme1p2a
    x = 1.2;
    res = zeros(21,2);
    for i = -20:0
        h = 10^i;
        res(i+21,:) = [f2(x,h)/h,f1(x,h)/h];
    end
    
function y = f1(x0,h)
y = sin(x0 + h) - sin(x0);
    
function y = f2(x0, h)
y = 2 * cos(x0 + (h/2)) * sin(h/2);
```


``f1`` is only included here to make the plotting easier afterwards.



### Error plot
![nme1p2a_plot]

The plot is generated using the following code:
```
res = nme1p2a';
scale = 10 .^ (-20:0);
loglog(scale, abs(res(1,:) - cos(1.2)))
hold on;
loglog(scale, abs(res(2,:) - cos(1.2)))
legend('f2','f1','Location','east')
xlabel('h')
ylabel('Error')
```
[nme1p2a_plot]: images/nme1p2a_plot.png "nme1p2a_plot" { width=auto max-width=90% }

### Explanation of Error Behaviour

The catastrophic effects of cancellation are visible in the plot of the error in ``f1``. When $h$ gets too small, the cancellation error dominates the approximation error. In ``f2``, no cancellation error is present, and the approximation error decreases with $h$. 

## Suitability for Numerical Computation
~ Equation
\ln{\left(x-\sqrt{x^2 - 1}\right)} = \ln{\left(x-\sqrt{x^2 - 1} * \frac{x+\sqrt{x^2 - 1}}{x+\sqrt{x^2 - 1}}\right)}
~
~ Equation
\ln{\left(x-\sqrt{x^2 - 1} * \frac{x+\sqrt{x^2 - 1}}{x+\sqrt{x^2 - 1}}\right)} = \ln{\left(\frac{1}{x+\sqrt{x^2 - 1}}\right)} = - \ln{\left(x + \sqrt{x^2 - 1}\right)}
~

The second formula is much more suitable for numerical computation, since the first one will suffer from cancellation, as the term $x - \sqrt{x^2-1}$ matches the criteria of a cancellation-error prone calculation. For $x = 60000000$ we already observe an error of $0.112$, which is significant.

## Numerical Difficulties

### $\sqrt{x + \frac{1}{x}} - \sqrt{x - \frac{1}{x}}$ with $x\gg1$

In this expression cancellation will occur, since the two terms that get subtracted are very close to the same size. We can apply the same trick as before:
~ Equation
\sqrt{x + \frac{1}{x}} - \sqrt{x - \frac{1}{x}} = \frac{2}{x * \left(\sqrt{x + \frac{1}{x}} + \sqrt{x - \frac{1}{x}}\right)}
~
This expression does not suffer from cancellation.

### $\sqrt{\frac{1}{a^2} + \frac{1}{b^2}}$ with $a \approx 0, b \approx 1$

The problem in this expression is that $\frac{1}{a^2}$ blows up the error in $a$. Furthermore since $\frac{1}{a^2}$ becomes much bigger than $\frac{1}{b^2}$, truncation occurs. The following rewrite offers an improvement:
~ Equation
\sqrt{\frac{1}{a^2} + \frac{1}{b^2}} = \sqrt{\frac{a^2 + b^2}{a^2b^2}} = \frac{\sqrt{a^2 + b^2}}{ab}
~


# Kronecker Product
## Matrix M {@h1-h2="b"}

~ Math
M = 
\begin{bmatrix}
   5  & 6  & 10 & 12 \\
   7  & 8  & 14 & 16 \\
   15 & 18 & 20 & 24 \\
   21 & 24 & 28 & 32
\end{bmatrix}

~

## Asymptotic Complexity

The asymptotic complexity of ``y = kron(A,B) * x`` is $O(n^4)$.

## Measured Runtimes

![nme1p3d_plot]

The above plot was generated using the following code:

```
[INCLUDE=code/nme1p3d.m]
```

[nme1p3d_plot]: images/nme1p3d_plot.png "nme1p3d_plot" { width=auto max-width=90% }

## Discussion of Reshape Implementation

The outer call to `reshape` simply reformats the $n$ by $n$ matrix as an $n^2$ by $1$ column vector, and the inner call to `reshape` creates a square matrix of size $n$ from the contents of the vector $x$. The interesting part is the multiplication $B \times x' \times A^T$ where $x'$ is a $n$ by $n$ matrix formed from the elements of $x$, but I am unable to explain the equivalence properly.  

![nme1p3e_plot]

The above plot was generated using the following code:

```
[INCLUDE=code/nme1p3e.m]
```

[nme1p3e_plot]: images/nme1p3e_plot.png "nme1p3e_plot" { width=auto max-width=90% }

## [Eigen]{font-variant=small-caps} Implementation of `kron`

``` cpp
[INCLUDE=code/kron.cpp]
``` 

## [Eigen]{font-variant=small-caps} Implementation of $(2)$

## [Eigen]{font-variant=small-caps} Implementation of $(3)$

## Runtime comparisons of [Eigen]{font-variant=small-caps} implementations