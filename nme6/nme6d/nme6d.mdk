Title         : Problem Sheet 6
Subtitle      : Numerical Methods for CSE
Heading Base  : 2
Author        : David Bimmler
Package       : mathtools
Logo          : false
Document Class: [a4paper]article

~ MathDefs
\newcommand{\N}{\mathbb{N}}
\newcommand{\F}{\mathbf{F}}
~


[TITLE]

# Evaluating the Derivatives of Interpolating Polynomials

## Efficient `dipoleval` { @h1-h2 = "b" }

Deriving the recursion formula of the Aitken-Neville scheme gives the following:

~ Math
p'_{k,l}(x) = p'_{k+1,l}(x) + \frac{p_{k+1,l}(x) - p_{k, l-1}(x) + (x-t_l)(p'_{k+1,l}(x) - p'_{k,l-1}(x))}{t_l - t_k}
~

Using this formula leads to the following code:

```
[INCLUDE=code/dipoleval.m]
```

## Naive `dipoleval_alt`

```
[INCLUDE=code/dipoleval_alt.m]
```


# Evaluating the Derivatives of Interpolating Polynomials { @h1 = "3" }

## Efficient `evaldp` using Horner Scheme

```cpp
[INCLUDE=code/evaldp.cpp:9-22]
```

## Naive `evaldp` 

```cpp
[INCLUDE=code/evaldp.cpp:25-45]
```

## Asymptotic Complexities

The asymptotic complexity of the efficient `evaldp` implementation is $\mathcal{O}(n)$, just like the naive implementation. If we consider the number of basic operations, however, we see that the efficient version is much less costly to compute. The efficient version has $3n$ multiplications and $2n$ additions, whereas the naive version more than $n^2$ multiplications if `pow(2,i)` is implemented using $i$ multiplications. 

##Â Validity Check 

```cpp
[INCLUDE=code/evaldp.cpp:47-80]
```